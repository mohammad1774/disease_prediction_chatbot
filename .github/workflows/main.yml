name: Build and Push Docker Image 

on:
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      #1. checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      #2 Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{  secrets.DOCKER_PASSWORD  }}" | docker login -u "${{  secrets.DOCKER_USERNAME  }}" --password-stdin

      #3 Build Docker image
      - name: Build Docker Image of Backend
        run: |
          echo "üî® Building Backend Docker image..."
          docker build -f Dockerfile.api -t ${{  secrets.DOCKER_USERNAME  }}/disease_prediction_backend:latest .
      
      - name: Build Docker Image of Frontend
        run: |
          echo "üî® Building Frontend Docker image..."
          docker build -f Dockerfile.ui -t ${{  secrets.DOCKER_USERNAME  }}/disease_prediction_frontend:latest .

      - name: Run Container for testing
        run: |
          echo "Running container to test API & Streamlit"
          docker run -d --name test_container_backend \
            -p 8000:8000 \
            -e OPENAI_API_KEY=${{  secrets.OPENAI_API_KEY  }} \
            -e LANGCHAIN_API_KEY=${{  secrets.LANGCHAIN_API_KEY  }} \
            ${{  secrets.DOCKER_USERNAME  }}/disease_prediction_backend:latest
          echo "Runnig Container frontend"
          docker run -d --name test_container_frontend \
            -p 8001:8001 \
            -e ENDPOINT_URL=http://localhost:8000 \
            ${{  secrets.DOCKER_USERNAME  }}/disease_prediction_frontend:latest

          sleep 30
          curl -f http://localhost:8000/docs || (echo "‚ùå FastAPI not responding!" && exit 1)
          curl -f http://localhost:8001 || (echo "‚ùå Streamlit not responding!" && exit 1)
          docker logs test_container_backend || true
          docker stop test_container_backend
          docker logs test_container_frontend || true
          docker stop test_container_frontend


      - name: Push Backend docker image
        run: |
          echo " Pushing docker image to Docker Hub"
          docker push ${{  secrets.DOCKER_USERNAME  }}/disease_prediction_backend:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/disease_prediction_backend:latest \
            ${{ secrets.DOCKER_USERNAME }}/disease_prediction_backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/disease_prediction_backend:${{ github.sha }}

          
      - name: Push Frontend docker image
        run: |
          echo " Pushing docker image to Docker Hub"
          docker push ${{  secrets.DOCKER_USERNAME  }}/disease_prediction_frontend:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/disease_prediction_frontend:latest \
            ${{ secrets.DOCKER_USERNAME }}/disease_prediction_frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/disease_prediction_frontend:${{ github.sha }}
  kubernetes:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      # 3. Install minikube
      - name: Install minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube version

      - name: Start Minikube
        run: |
          minikube start --driver=docker --kubernetes-version=v1.30.0
          kubectl get nodes
      
      - name: Apply Kubernetest manifests
        run: | 
          kubectl apply -f k8s/
          kubectl get all

      - name: Wait for Pods
        run: |
          kubectl wait --for=condition=ready pod --all --timeout=240s

      - name: Test webapp service
        run: |
          sleep 10
          URL=$(minikube service webapp-service --url)
          curl -f $URL || (echo "‚ùå Webapp not reachable" && exit 1)
      - name: Test backend Service
        run: |
          kubectl run curlpod --rm -i --image=curlimages/curl --restart=Never -- \
            curl -X POST http://endpoint-service:8000/predict \
            -H "Content-Type: application/json" \
            -d '{"data":{"bmi":25,"weight":70,"height_filled":175,"delta_age":30,"50931":0}, "query":"test"}'
      - name: ‚úÖ All tests passed
        if: success()
        run: |
          echo "üéâ All tests passed successfully!"
          echo "üöÄ Docker images built & pushed, Kubernetes cluster running fine."
          




