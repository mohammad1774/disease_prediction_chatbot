name: Terraform Provisioning

on:
  push:
    branches: [terraform-test, main]
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: What do you want to do?
        options: [apply, destroy, plan]
        default: apply
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  terraform_provisioning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export Terraform Env Vars
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Terraform Init
        run: terraform init -reconfigure

      # Manual plan-only
      - name: Terraform Plan (manual dry-run)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan'
        run: terraform plan -no-color

      # Manual apply
      - name: Terraform Plan (manual apply)
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') || github.event_name == 'push'
        run: terraform plan -out=tfplan

      - name: Terraform Apply (manual apply)
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') || github.event_name == 'push'
        run: terraform apply -auto-approve tfplan      

      - name: Get Terraform Outputs
        id: tf-out
        run: |
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT

        
      - name: Save Secrets into GitHub
        run: |
          gh secret set AZURE_ACR_LOGIN_SERVER --repo $GITHUB_REPOSITORY --body "${{ steps.tf-out.outputs.acr_login_server }}" 
          gh secret set AZURE_ACR_USERNAME --repo $GITHUB_REPOSITORY --body "${{ steps.tf-out.outputs.acr_admin_username }}"
          gh secret set AZURE_ACR_PASSWORD --repo $GITHUB_REPOSITORY --body "${{ steps.tf-out.outputs.acr_admin_password }}"

        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}


      # Manual destroy
      - name: Terraform Plan (manual destroy)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform plan -destroy -out=tfplan

      - name: Terraform Apply (manual destroy)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform apply -auto-approve tfplan

  docker-push-build:
    needs: terraform_provisioning
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: ACR Login with Azure CLI
        run: |
          az acr login --name mohammadacr1774

      - name: Build Docker Image of Backend
        run: |
          echo "üî® Building Backend Docker image..."
          docker build -f Dockerfile.api -t ${{  secrets.AZURE_ACR_LOGIN_SERVER  }}/disease_prediction_backend:latest .
      
      - name: Build Docker Image of Frontend
        run: |
          echo "üî® Building Frontend Docker image..."
          docker build -f Dockerfile.ui -t ${{  secrets.AZURE_ACR_LOGIN_SERVER  }}/disease_prediction_frontend:latest .

      - name: Run Container for testing
        run: |
          echo "Running container to test API & Streamlit"
          docker run -d --name test_container_backend \
            -p 8000:8000 \
            -e OPENAI_API_KEY=${{  secrets.OPENAI_API_KEY  }} \
            -e LANGCHAIN_API_KEY=${{  secrets.LANGCHAIN_API_KEY  }} \
            ${{  secrets.AZURE_ACR_LOGIN_SERVER  }}/disease_prediction_backend:latest
          echo "Runnig Container frontend"
          docker run -d --name test_container_frontend \
            -p 8001:8001 \
            -e ENDPOINT_URL=http://localhost:8000 \
            ${{  secrets.AZURE_ACR_LOGIN_SERVER  }}/disease_prediction_frontend:latest

          sleep 30
          curl -f http://localhost:8000/docs || (echo "‚ùå FastAPI not responding!" && exit 1)
          curl -f http://localhost:8001 || (echo "‚ùå Streamlit not responding!" && exit 1)
          docker logs test_container_backend || true
          docker stop test_container_backend
          docker logs test_container_frontend || true
          docker stop test_container_frontend

      - name: Push Backend docker image
        run: |
          echo " Pushing docker image to Docker Hub"
          docker push ${{  secrets.AZURE_ACR_LOGIN_SERVER  }}/disease_prediction_backend:latest
          docker tag ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/disease_prediction_backend:latest \
            ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/disease_prediction_backend:${{ github.sha }}
          docker push ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/disease_prediction_backend:${{ github.sha }}

          
      - name: Push Frontend docker image
        run: |
          echo " Pushing docker image to Docker Hub"
          docker push ${{  secrets.AZURE_ACR_LOGIN_SERVER  }}/disease_prediction_frontend:latest
          docker tag ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/disease_prediction_frontend:latest \
            ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/disease_prediction_frontend:${{ github.sha }}
          docker push ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/disease_prediction_frontend:${{ github.sha }}
  
