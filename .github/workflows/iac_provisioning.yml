name: Terraform Provisioning

on:
  push:
    branches: [terraform-test, main]
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: What do you want to do?
        options: [apply, destroy, plan]
        default: apply
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  terraform_provisioning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export Terraform Env Vars
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Terraform Init
        run: terraform init -reconfigure

      # Push to main: plan + apply
      - name: Terraform Plan (auto on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform plan -out=tfplan

      - name: Terraform Apply (auto on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      # Manual plan-only
      - name: Terraform Plan (manual dry-run)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan'
        run: terraform plan -no-color

      # Manual apply
      - name: Terraform Plan (manual apply)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform plan -out=tfplan

      - name: Terraform Apply (manual apply)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-out
        run: |
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT
          echo "kubeconfig=$(terraform output -raw aks_kube_config)" >> $GITHUB_ENV
        
      - name: Save Secrets into GitHub
        run: |
          echo "${{ steps.tf-out.outputs.acr_login_server }}" | gh secret set AZURE_ACR_LOGIN_SERVER --repo $GITHUB_REPOSITORY
          echo "${{ steps.tf-out.outputs.acr_admin_username }}" | gh secret set AZURE_ACR_USERNAME --repo $GITHUB_REPOSITORY
          echo "${{ steps.tf-out.outputs.acr_admin_password }}" | gh secret set AZURE_ACR_PASSWORD --repo $GITHUB_REPOSITORY
          echo "${{ env.kubeconfig }}" | gh secret set AKS_KUBECONFIG --env production --repo $GITHUB_REPOSITORY
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}


      # Manual destroy
      - name: Terraform Plan (manual destroy)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform plan -destroy -out=tfplan

      - name: Terraform Apply (manual destroy)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform apply -auto-approve tfplan

  
  
      
      
      
